// shadertype=glsl
#version 400 core
layout(location = 0, index = 0) out vec4 outputColor0;
layout(location = 0, index = 1) out vec4 outputColor1;

in vec4 thefrag_WorldSpacePos;
in vec3 thefrag_Normal;
in vec2 thefrag_TexCoord;

uniform vec4 uni_albedo;
uniform vec3 uni_viewPos;

void main()
{
	// get edge vectors of the pixel triangle
	vec3 dp1 = dFdx(thefrag_WorldSpacePos.xyz);
	vec3 dp2 = dFdy(thefrag_WorldSpacePos.xyz);
	vec2 duv1 = dFdx(thefrag_TexCoord);
	vec2 duv2 = dFdy(thefrag_TexCoord);

	// solve the linear system
	vec3 N = normalize(thefrag_Normal);
	vec3 dp2perp = cross(dp2, N);
	vec3 dp1perp = cross(N, dp1);
	vec3 T = normalize(dp2perp * duv1.x + dp1perp * duv2.x);
	vec3 B = normalize(dp2perp * duv1.y + dp1perp * duv2.y);

	mat3 TBN = mat3(T, B, N);

	vec3 WorldSpaceNormal;
	WorldSpaceNormal = normalize(TBN * vec3(0.0f, 0.0f, 1.0f));

	vec3 V = normalize(uni_viewPos - thefrag_WorldSpacePos.xyz);
	float NdotV = max(dot(WorldSpaceNormal, V), 0.0);

	vec3 transmittance;
	transmittance = uni_albedo.rgb;

	float thickness = 0.1f;
	float d = thickness / max(NdotV, 0.00001);

	vec3 sigma = -(log(transmittance) / 4.0f);

	vec3 Tr = exp(-sigma * d);

	outputColor0 = vec4(transmittance, 1.0f);
	outputColor1 = vec4(1.0f - (Tr + 1.0f) * uni_albedo.a, 1.0f);
}