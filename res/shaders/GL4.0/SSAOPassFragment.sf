// shadertype=<glsl>
#version 400 core
layout(location = 0) out vec4 uni_SSAOPassRT0;

in vec2 TexCoords;

uniform sampler2D uni_Position;
uniform sampler2D uni_Normal;
uniform sampler2D uni_texNoise;

uniform vec3 uni_samples[64];

uniform mat4 uni_p;
uniform mat4 uni_v;

int kernelSize = 64;
float radius = 0.5f;
float bias = 0.025f;

void main()
{
	vec2 noiseScale = vec2(textureSize(uni_Position, 0) / 4.0f);

	// get input for SSAO algorithm
	vec3 fragPos = (uni_v * texture(uni_Position, TexCoords)).xyz;
	vec3 normal = (uni_v * texture(uni_Normal, TexCoords)).rgb;
	normal = normalize(normal);
	vec3 randomVec = normalize(texture(uni_texNoise, TexCoords * noiseScale).xyz);

	// create TBN change-of-basis matrix: from tangent-space to view-space
	vec3 tangent = normalize(randomVec - normal * dot(randomVec, normal));
	vec3 bitangent = cross(normal, tangent);
	mat3 TBN = mat3(tangent, bitangent, normal);

	// iterate over the sample kernel and calculate occlusion factor
	float occlusion = 0.0f;
	for (int i = 0; i < kernelSize; ++i)
	{
		// get sample position
		vec3 ssaoSample = TBN * uni_samples[i]; // from tangent to view-space
		ssaoSample = fragPos + ssaoSample * radius;

		// project sample position (to sample texture) (to get position on screen/texture)
		vec4 offset = vec4(ssaoSample, 1.0);
		offset = uni_p * offset; // from view to clip-space
		offset.xyz /= offset.w; // perspective divide
		offset.xyz = offset.xyz * 0.5f + 0.5f; // transform to range 0.0 - 1.0

		// get sample depth
		float sampleDepth = texture(uni_Position, offset.xy).z; // get depth value of kernel sample

		// range check & accumulate
		float rangeCheck = smoothstep(0.0, 1.0, radius / abs(fragPos.z - sampleDepth));
		occlusion += (sampleDepth >= ssaoSample.z + bias ? 1.0 : 0.0) * rangeCheck;
	}

	occlusion = 1.0 - (occlusion / kernelSize);

	uni_SSAOPassRT0 = vec4(vec3(occlusion), 1.0);
}
