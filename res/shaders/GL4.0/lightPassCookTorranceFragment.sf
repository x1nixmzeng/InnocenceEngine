// shadertype=glsl
#version 400 core
layout(location = 0) out vec4 uni_lightPassRT0;

in vec2 TexCoords;

struct dirLight {
	vec3 direction;
	vec3 color;
};

struct pointLight {
	vec3 position;
	float attenuationRadius;
	vec3 luminance;
};

struct sphereLight {
	vec3 position;
	float sphereRadius;
	vec3 luminance;
};

const float eps = 0.00001;
const float PI = 3.14159265359;
const int NR_POINT_LIGHTS = 64;
const int NR_SPHERE_LIGHTS = 64;

const float MAX_REFLECTION_LOD = 4.0;

uniform sampler2D uni_geometryPassRT0;
uniform sampler2D uni_geometryPassRT1;
uniform sampler2D uni_geometryPassRT2;
uniform sampler2D uni_geometryPassRT3;
uniform sampler2D uni_geometryPassRT4;
uniform sampler2D uni_geometryPassRT5;
uniform sampler2D uni_geometryPassRT6;
uniform sampler2D uni_geometryPassRT7;

const int NR_CSM_SPLITS = 4;
bool uni_drawCSMSplitedArea = false;
uniform sampler2D uni_shadowMap_0;
uniform sampler2D uni_shadowMap_1;
uniform sampler2D uni_shadowMap_2;
uniform sampler2D uni_shadowMap_3;
uniform vec4 uni_shadowSplitAreas[NR_CSM_SPLITS];

uniform sampler2D uni_brdfLUT;
uniform sampler2D uni_brdfMSLUT;

uniform vec3 uni_viewPos;
uniform dirLight uni_dirLight;
uniform pointLight uni_pointLights[NR_POINT_LIGHTS];
uniform sphereLight uni_sphereLights[NR_SPHERE_LIGHTS];

uniform bool uni_isEmissive;

// Oren-Nayar diffuse BRDF [https://github.com/glslify/glsl-diffuse-oren-nayar]
// ----------------------------------------------------------------------------
float orenNayarDiffuse(float LdotV, float NdotL, float NdotV, float roughness)
{
	float s = LdotV - NdotL * NdotV;
	float t = mix(1.0, max(NdotL, NdotV), step(0.0, s));

	float sigma2 = roughness * roughness;
	float A = 1.0 - (0.5 * sigma2 / (sigma2 + 0.33));
	float B = 0.45 * sigma2 / (sigma2 + 0.09);

	return max(0.0, NdotL) * (A + B * s / t);
}

// Frostbite Engine model [https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf]
// ----------------------------------------------------------------------------
// punctual light attenuation
// ----------------------------------------------------------------------------
float smoothDistanceAtt(float squaredDistance, float invSqrAttRadius)
{
	float factor = squaredDistance * invSqrAttRadius;
	float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);
	return smoothFactor * smoothFactor;
}
float getDistanceAtt(vec3 unormalizedLightVector, float invSqrAttRadius)
{
	float sqrDist = dot(unormalizedLightVector, unormalizedLightVector);
	float attenuation = 1.0 / (max(sqrDist, eps));
	attenuation *= smoothDistanceAtt(sqrDist, invSqrAttRadius);

	return attenuation;
}
// Specular Fresnel Component
// ----------------------------------------------------------------------------
vec3 fr_F_Schlick(vec3 f0, float f90, float u)
{
	return f0 + (f90 - f0) * pow(1.0 - u, 5.0);
}
// Diffuse BRDF
// ----------------------------------------------------------------------------
float fd_DisneyDiffuse(float NdotV, float NdotL, float LdotH, float linearRoughness)
{
	float NdotV_ = max(NdotV, eps);
	float	NdotL_ = max(NdotL, eps);
	float energyBias = mix(0.0, 0.5, linearRoughness);
	float energyFactor = mix(1.0, 1.0 / 1.51, linearRoughness);
	float fd90 = energyBias + 2.0 * LdotH * LdotH * linearRoughness;
	vec3 f0 = vec3(1.0, 1.0, 1.0);
	float lightScatter = fr_F_Schlick(f0, fd90, NdotL_).r;
	float viewScatter = fr_F_Schlick(f0, fd90, NdotV_).r;
	return lightScatter * viewScatter * energyFactor;
}
// Specular Visibility Component
// ----------------------------------------------------------------------------
float fr_V_SmithGGXCorrelated(float NdotL, float NdotV, float alphaG)
{
	float alphaG2 = alphaG * alphaG;
	float NdotV_ = max(NdotV, eps);
	float	NdotL_ = max(NdotL, eps);
	float Lambda_GGXV = NdotL_ * sqrt(NdotV_ * NdotV_ * (1.0 - alphaG2) + alphaG2);
	float Lambda_GGXL = NdotV_ * sqrt(NdotL_ * NdotL_ * (1.0 - alphaG2) + alphaG2);
	return 0.5 / (Lambda_GGXV + Lambda_GGXL);
}
// Specular Distribution Component
// ----------------------------------------------------------------------------
float fr_D_GGX(float NdotH, float roughness)
{
	// remapping to Quadratic curve
	float a = roughness * roughness;
	float a2 = a * a;
	float f = (NdotH * a2 - NdotH) * NdotH + 1;
	return a2 / (pow(f, 2.0));
}
// Unreal Engine model [https://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf]
// ----------------------------------------------------------------------------
// Specular Distribution Component
// ----------------------------------------------------------------------------
float Unreal_DistributionGGX(float NdotH, float roughness)
{
	float a = roughness * roughness;
	// remapping to Quadratic curve
	float a2 = a * a;
	float NdotH2 = NdotH * NdotH;

	float nom = a2;
	float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	denom = denom * denom;

	return nom / denom;
}
// Specular Geometry Component
// ----------------------------------------------------------------------------
float Unreal_GeometrySchlickGGX(float NdotV, float roughness)
{
	float r = (roughness + 1.0);
	float k = (r*r) / 8.0;

	float nom = NdotV;
	float denom = NdotV * (1.0 - k) + k;

	return nom / denom;
}
// ----------------------------------------------------------------------------
float Unreal_GeometrySmith(float NdotV, float NdotL, float roughness)
{
	float ggx2 = Unreal_GeometrySchlickGGX(NdotV, roughness);
	float ggx1 = Unreal_GeometrySchlickGGX(NdotL, roughness);

	return ggx1 * ggx2;
}
// "Real-Time Rendering", 4th edition, pg. 346, "9.8.2 Multiple-Bounce Surface Reflection"
// ----------------------------------------------------------------------------
vec3 AverangeFresnel(vec3 F0)
{
	return 20.0 * F0 / 21.0 + 1.0 / 21.0;
}
vec3 getFrMS(float NdotL, float NdotV, vec3 F0, float roughness)
{
	float alpha = roughness * roughness;
	vec3 f_averange = AverangeFresnel(F0);
	float rsF1_averange =  texture(uni_brdfMSLUT, vec2(0.0, alpha)).r;
	float rsF1_l = texture(uni_brdfLUT, vec2(NdotL, alpha)).b;
	float rsF1_v = texture(uni_brdfLUT, vec2(NdotV, alpha)).b;

	vec3 frMS = vec3(0.0);
	float beta1 = 1.0 - rsF1_averange;
	float beta2 = 1.0 - rsF1_l;
	float beta3 = 1.0 - rsF1_v;

	frMS = f_averange * rsF1_averange / (PI * beta1 * (vec3(1.0) - f_averange * beta1) + eps);
	frMS = frMS * beta2 * beta3;
	return frMS;
}
// ----------------------------------------------------------------------------
vec3 getRadiance(float NdotV, float LdotH, float NdotH, float NdotL, float roughness, vec3 F0, vec3 Albedo, vec3 lightRadiance)
{
	// Specular BRDF
	float f90 = 1.0;
	vec3 F = fr_F_Schlick(F0, f90, NdotV);
	float G = fr_V_SmithGGXCorrelated(NdotV, NdotL, roughness);
	float D = fr_D_GGX(NdotH, roughness);
	vec3 Frss =  F * D * G / PI;
	
	// Real-Time Rendering", 4th edition, pg. 341, "9.8 BRDF Models for Surface Reflection, the 4 * NdV * NdL has already been cancelled by G function
	vec3 Frms = getFrMS(NdotL, NdotV, F0, roughness);

	vec3 Fr = Frss + Frms;

	// Diffuse BRDF
	vec3 Fd = fd_DisneyDiffuse(NdotV, NdotL, LdotH, roughness * roughness) * Albedo / PI;

	return (Fd + Fr) * lightRadiance * NdotL;
}
// shadow mapping
// ----------------------------------------------------------------------------
float PCF(float NdotL, vec3 projCoords, sampler2D shadowMap)
{
	// transform to [0,1] range
	projCoords = projCoords * 0.5 + 0.5;

	// get depth of current fragment from light's perspective
	float currentDepth = projCoords.z;

	// calculate bias (based on depth map resolution and slope)
	float bias = max(0.05 * (1.0 - NdotL), 0.005);

	// PCF
	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
	for (int x = -1; x <= 1; ++x)
	{
		for (int y = -1; y <= 1; ++y)
		{
			float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r;
			shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;
		}
	}
	shadow /= 9.0;

	return shadow;
}
// ----------------------------------------------------------------------------
float ShadowCalculation(float NdotL, vec3 fragPos)
{
	vec3 projCoords = vec3(0.0);
	float shadow = 0.0;

	int splitIndex = 3;
	for (int i = 0; i < NR_CSM_SPLITS; i++)
	{
		if (fragPos.x >= uni_shadowSplitAreas[i].x &&
			fragPos.z >= uni_shadowSplitAreas[i].y &&
			fragPos.x <= uni_shadowSplitAreas[i].z &&
			fragPos.z <= uni_shadowSplitAreas[i].w)
		{
			splitIndex = i;
			break;
		}
	}

	if (splitIndex == 0)
	{
		vec4 gPassRT = texture(uni_geometryPassRT4, TexCoords);
		projCoords = gPassRT.xyz;
		shadow = PCF(NdotL, projCoords, uni_shadowMap_0);
	}
	else if (splitIndex == 1)
	{
		vec4 gPassRT = texture(uni_geometryPassRT5, TexCoords);
		projCoords = gPassRT.xyz;
		shadow = PCF(NdotL, projCoords, uni_shadowMap_1);
	}
	else if (splitIndex == 2)
	{
		vec4 gPassRT = texture(uni_geometryPassRT6, TexCoords);
		projCoords = gPassRT.xyz;
		shadow = PCF(NdotL, projCoords, uni_shadowMap_2);
	}
	else if (splitIndex == 3)
	{
		vec4 gPassRT = texture(uni_geometryPassRT7, TexCoords);
		projCoords = gPassRT.xyz;
		shadow = PCF(NdotL, projCoords, uni_shadowMap_3);
	}
	else
	{
		shadow = 0.0;
	}

	return shadow;
}
// ----------------------------------------------------------------------------
void main()
{
	vec4 RT0 = texture(uni_geometryPassRT0, TexCoords);
	vec4 RT1 = texture(uni_geometryPassRT1, TexCoords);
	vec4 RT2 = texture(uni_geometryPassRT2, TexCoords);

	vec3 FragPos = RT0.rgb;
	vec3 Normal = RT1.rgb;
	vec3 Albedo = RT2.rgb;

	float Metallic = RT0.a;
	float Roughness = RT1.a;
	float safe_roughness = (Roughness + eps) / (1.0 + eps);
	float AO = RT2.a;

	vec3 Lo = vec3(0.0);

	if (uni_isEmissive)
	{
		Lo = Albedo;
	}
	else
	{
		vec3 F0 = vec3(0.04);
		F0 = mix(F0, Albedo, Metallic);

		vec3 N = normalize(Normal);
		vec3 V = normalize(uni_viewPos - FragPos);

		float NdotV = max(dot(N, V), 0.0);

		// direction light, sun light
		vec3 L = normalize(-uni_dirLight.direction);
		vec3 H = normalize(V + L);

		float LdotH = max(dot(L, H), 0.0);
		float NdotH = max(dot(N, H), 0.0);
		float NdotL = max(dot(N, L), 0.0);

		Lo += getRadiance(NdotV, LdotH, NdotH, NdotL, safe_roughness, F0, Albedo, uni_dirLight.color);

		Lo *= 1 - ShadowCalculation(NdotL, FragPos);

		// point punctual light
		for (int i = 0; i < NR_POINT_LIGHTS; ++i)
		{
			vec3 unormalizedL = uni_pointLights[i].position - FragPos;
			float lightRadius = uni_pointLights[i].attenuationRadius;
			if (length(unormalizedL) < lightRadius)
			{
				L = normalize(unormalizedL);
				H = normalize(V + L);

				LdotH = max(dot(L, H), 0.0);
				NdotH = max(dot(N, H), 0.0);
				NdotL = max(dot(N, L), 0.0);

				float attenuation = 1.0;
				float invSqrAttRadius = 1.0 / max(lightRadius * lightRadius, eps);
				attenuation *= getDistanceAtt(unormalizedL, invSqrAttRadius);
				
				vec3 lightRadiance = uni_pointLights[i].luminance * attenuation;

				Lo += getRadiance(NdotV, LdotH, NdotH, NdotL, safe_roughness, F0, Albedo, lightRadiance);
			}
		}
		
		// sphere area light
		for (int i = 0; i < NR_SPHERE_LIGHTS; ++i)
		{
			vec3 unormalizedL = uni_sphereLights[i].position - FragPos;
			float lightRadius = uni_sphereLights[i].sphereRadius;

			L = normalize(unormalizedL);
			H = normalize(V + L);

			LdotH = max(dot(L, H), 0.0);
			NdotH = max(dot(N, H), 0.0);
			NdotL = max(dot(N, L), 0.0);
						
			float sqrDist = dot(unormalizedL, unormalizedL);
				
			float Beta = acos(NdotL);
			float H2 = sqrt(sqrDist);
			float h = H2 / lightRadius;
			float x = sqrt(max(h * h - 1, eps));
			float y = -x * (1 / tan(Beta));
			y = clamp(y, -1.0, 1.0);
			float illuminance = 0;

			if (h * cos (Beta) > 1)
			{
				illuminance = cos (Beta) / (h * h);
			}
			else
			{
				illuminance = (1 / max(PI * h * h, eps))
				* (cos(Beta) * acos(y) - x * sin(Beta) * sqrt(max(1 - y * y, eps)))
				+ (1 / PI) * atan((sin(Beta) * sqrt(max(1 - y * y, eps)) / x));
			}
			illuminance *= PI;
			
			Lo += getRadiance(NdotV, LdotH, NdotH, NdotL, safe_roughness, F0, Albedo, illuminance * uni_sphereLights[i].luminance);
		}		
	}
	if (uni_drawCSMSplitedArea)
	{
		int splitIndex = NR_CSM_SPLITS;
		for (int i = 0; i < NR_CSM_SPLITS; i++)
		{
			if (FragPos.x >= uni_shadowSplitAreas[i].x &&
				FragPos.z >= uni_shadowSplitAreas[i].y &&
				FragPos.x <= uni_shadowSplitAreas[i].z &&
				FragPos.z <= uni_shadowSplitAreas[i].w)
			{
				splitIndex = i;
				break;
			}
		}

		if (splitIndex == 0)
		{
			Lo.r += 0.1;
		}
		else if (splitIndex == 1)
		{
			Lo.r += 0.1;
			Lo.g += 0.1;
		}
		else if (splitIndex == 2)
		{
			Lo.g += 0.1;
		}
		else if (splitIndex == 3)
		{
			Lo.b += 0.1;
		}
		else
		{
			Lo.r += 0.1;
			Lo.g += 0.1;
			Lo.b += 0.1;
		}
	}
	uni_lightPassRT0.rgb = Lo;
	uni_lightPassRT0.a = 1.0;
}
