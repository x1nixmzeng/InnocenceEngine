// shadertype=hlsl

Texture2D t2d_normal : register(t0);
Texture2D t2d_albedo : register(t1);
Texture2D t2d_metallic : register(t2);
Texture2D t2d_roughness : register(t3);
Texture2D t2d_ao : register(t4);

SamplerState SampleTypeWrap;

cbuffer textureCBuffer
{
	float4 albedo;
	float4 MRA;
	bool useNormalTexture;
	bool useAlbedoTexture;
	bool useMetallicTexture;
	bool useRoughnessTexture;
	bool useAOTexture;
	bool padding1;
	bool padding2;
	bool padding3;
};

struct PixelInputType
{
	float4 thefrag_ClipSpacePos : SV_POSITION;
	float3 thefrag_WorldSpacePos : POSITION;
	float2 thefrag_TexCoord : TEXCOORD;
	float3 thefrag_Normal : NORMAL;
};

struct PixelOutputType
{
	float4 uni_geometryPassRT0 : SV_Target0;
	float4 uni_geometryPassRT1 : SV_Target1;
	float4 uni_geometryPassRT2 : SV_Target2;
};

PixelOutputType geometryPassCookTorrancePixel(PixelInputType input) : SV_TARGET
{
	PixelOutputType output;

	float3 normalInWorldSpace;
	if (useNormalTexture)
	{
		// get edge vectors of the pixel triangle
		float3 dp1 = ddx_fine(input.thefrag_WorldSpacePos);
		float3 dp2 = ddy_fine(input.thefrag_WorldSpacePos);
		float2 duv1 = ddx_fine(input.thefrag_TexCoord);
		float2 duv2 = ddy_fine(input.thefrag_TexCoord);

		// solve the linear system
		float3 N = normalize(input.thefrag_Normal);

		float3 dp2perp = cross(dp2, N);
		float3 dp1perp = cross(N, dp1);
		float3 T = -normalize(dp2perp * duv1.x + dp1perp * duv2.x);
		float3 B = -normalize(dp2perp * duv1.y + dp1perp * duv2.y);

		float3x3 TBN = float3x3(T, B, N);

		float3 normalInTangentSpace = normalize(t2d_normal.Sample(SampleTypeWrap, input.thefrag_TexCoord).rgb * 2.0f - 1.0f);
		normalInWorldSpace = normalize(mul(normalInTangentSpace, TBN));
	}
	else
	{
		normalInWorldSpace = normalize(input.thefrag_Normal);
	}

	float3 out_Albedo;
	if (useAlbedoTexture)
	{
		out_Albedo = t2d_albedo.Sample(SampleTypeWrap, input.thefrag_TexCoord).rgb;
	}
	else
	{
		out_Albedo = albedo.rgb;
	}

	float out_Metallic;
	if (useMetallicTexture)
	{
		out_Metallic = t2d_metallic.Sample(SampleTypeWrap, input.thefrag_TexCoord).r;
	}
	else
	{
		out_Metallic = MRA.r;
	}

	float out_Roughness;
	if (useRoughnessTexture)
	{
		out_Roughness = t2d_roughness.Sample(SampleTypeWrap, input.thefrag_TexCoord).r;
	}
	else
	{
		out_Roughness = MRA.g;
	}

	float out_AO;
	if (useAOTexture)
	{
		out_AO = t2d_ao.Sample(SampleTypeWrap, input.thefrag_TexCoord).r;
	}
	else
	{
		out_AO = MRA.b;
	}

	output.uni_geometryPassRT0 = float4(input.thefrag_WorldSpacePos, out_Metallic);

	output.uni_geometryPassRT1 = float4(normalInWorldSpace, out_Roughness);

	output.uni_geometryPassRT2 = float4(out_Albedo, out_AO);

  return output;
}