// shadertype=hlsl

Texture2D t2d_normal : register(t0);
Texture2D t2d_albedo : register(t1);
Texture2D t2d_metallic : register(t2);
Texture2D t2d_roughness : register(t3);
Texture2D t2d_ao : register(t4);

SamplerState SampleTypeWrap;

struct PixelInputType
{
    float4 thefrag_WorldSpacePos : SV_POSITION;
    float2 thefrag_TexCoord : TEXCOORD;
    float3 thefrag_Normal :NORMAL;
};

struct PixelOutputType
{
    float4 uni_geometryPassRT0 : SV_Target0;
    float4 uni_geometryPassRT1 : SV_Target1;
    float4 uni_geometryPassRT2 : SV_Target2;
};

PixelOutputType geometryPassCookTorrancePixel(PixelInputType input) : SV_TARGET
{
  PixelOutputType output;

	output.uni_geometryPassRT0 = float4(
	input.thefrag_WorldSpacePos.xyz, 
	t2d_metallic.Sample(SampleTypeWrap, input.thefrag_TexCoord).r);
	
	// get edge vectors of the pixel triangle
	float3 dp1 = ddx_fine(input.thefrag_WorldSpacePos.xyz);
	float3 dp2 = ddy_fine(input.thefrag_WorldSpacePos.xyz);
	float2 duv1 = ddx_fine(input.thefrag_TexCoord);
	float2 duv2 = ddy_fine(input.thefrag_TexCoord);
 
	// solve the linear system
	float3 N = normalize(input.thefrag_Normal);

	float3 T = normalize(dp1 * duv2.x - dp2 * duv1.x);
  float3 B = -normalize(cross(N, T));

	float3x3 TBN = float3x3(T, B, N);
  
  float3 normalInTangentSpace = normalize(t2d_normal.Sample(SampleTypeWrap, input.thefrag_TexCoord).rgb * 2.0f - 1.0f);
  float3 normalInWorldSpace = normalize(mul(normalInTangentSpace, TBN));
  output.uni_geometryPassRT1 = float4(
	normalInWorldSpace,
	t2d_roughness.Sample(SampleTypeWrap, input.thefrag_TexCoord).r);

	output.uni_geometryPassRT2 = float4(
	t2d_albedo.Sample(SampleTypeWrap, input.thefrag_TexCoord).rgb, 
	t2d_ao.Sample(SampleTypeWrap, input.thefrag_TexCoord).r);

  return output;
}