// shadertype=hlsl

cbuffer cameraCBuffer
{
	matrix m_CamProjOriginal;
	matrix m_CamProjJittered;
	matrix m_CamRot;
	matrix m_CamTrans;
	matrix m_CamRot_prev;
	matrix m_CamTrans_prev;
};

cbuffer meshCBuffer
{
	matrix m;
	matrix m_normalMat;
};

struct VertexInputType
{
	float4 position : POSITION;
	float2 texcoord : TEXCOORD;
	float2 pada : PADA;
	float4 normal : NORMAL;
	float4 padb : PADB;
};

struct PixelInputType
{
	float4 thefrag_ClipSpacePos : SV_POSITION;
	float3 thefrag_WorldSpacePos : POSITION;
	float2 thefrag_TexCoord : TEXCOORD;
	float3 thefrag_Normal : NORMAL;
};

PixelInputType opaquePassCookTorranceVertex(VertexInputType input)
{
	PixelInputType output;

	float4 thefrag_WorldSpacePos = mul(input.position, m);
	output.thefrag_ClipSpacePos = mul(thefrag_WorldSpacePos, m_CamTrans);
	output.thefrag_ClipSpacePos = mul(output.thefrag_ClipSpacePos, m_CamRot);
	output.thefrag_ClipSpacePos = mul(output.thefrag_ClipSpacePos, m_CamProjOriginal);
	output.thefrag_WorldSpacePos = thefrag_WorldSpacePos.xyz;
	output.thefrag_TexCoord = input.texcoord;
	output.thefrag_Normal = mul(input.normal, m_normalMat).xyz;
	return output;
}