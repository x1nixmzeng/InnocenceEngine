// shadertype=<glsl>
#version 330 core
layout (location = 0) out vec4 uni_skyPassRT0;

in vec3 TexCoords;
in mat4 inv_p;
in mat4 inv_v;

uniform vec2 uni_viewportSize;
uniform vec3 uni_eyePos;
uniform vec3 uni_lightDir;

const float PI = 3.14159265359;

vec3 get_world_normal(){
    vec2 frag_coord = gl_FragCoord.xy / uni_viewportSize;
    frag_coord = (frag_coord - 0.5) * 2.0;
    vec4 device_normal = vec4(frag_coord, 0.0, 1.0);
    vec4 eye_normal = inv_p * device_normal;
    eye_normal = eye_normal / eye_normal.w;
    vec3 world_normal = normalize(inv_v * eye_normal).xyz;
    return world_normal;
}

float rayleigh(float cosTheta)
{
	return (3.0 / (16.0 * PI)) * (1 + pow(cosTheta, 2.0));
}

// Henyey-Greenstein
float mie_HG(float cosTheta, float g){
		float g2 = pow(g, 2.0);
    float nom = 1.0 - g2;
    float denom = 4 * PI * pow(1.0 + g2 - 2.0 * g * cosTheta, 1.5) + 0.0001;
    return nom / denom;
}

// Schlick approximation
float mie_Schlick(float cosTheta, float g)
{
	float k = 1.55 * g - 0.55 * pow(g, 3.0);
	float nom = 1.0- pow(k, 2.0);	
  float denom = 4 * PI * pow((1.0 + k * cosTheta), 2.0) + 0.0001;
  return nom / denom;
}

#define iSteps 16
#define jSteps 8

vec2 rsi(vec3 r0, vec3 rd, float sr) {
    // ray-sphere intersection that assumes
    // the sphere is centered at the origin.
    // No intersection when result.x > result.y
    float a = dot(rd, rd);
    float b = 2.0 * dot(rd, r0);
    float c = dot(r0, r0) - (sr * sr);
    float d = (b*b) - 4.0*a*c;
    if (d < 0.0) return vec2(1e5,-1e5);
    return vec2(
        (-b - sqrt(d))/(2.0*a),
        (-b + sqrt(d))/(2.0*a)
    );
}


//https://github.com/wwwtyro/glsl-atmosphere

vec3 atmosphere(vec3 r, vec3 r0, vec3 pSun, float iSun, float rPlanet, float rAtmos, vec3 kRlh, float kMie, float shRlh, float shMie, float g) {
    pSun = normalize(pSun);
    r = normalize(r);

    // Calculate the step size of the primary ray.
    vec2 p = rsi(r0, r, rAtmos);
    if (p.x > p.y) return vec3(0,0,0);
    p.y = min(p.y, rsi(r0, r, rPlanet).x);
    float iStepSize = (p.y - p.x) / float(iSteps);

    // Initialize the primary ray time.
    float iTime = 0.0;

    // Initialize accumulators for Rayleigh and Mie scattering.
    vec3 rayleigh_collected = vec3(0,0,0);
    vec3 mie_collected = vec3(0,0,0);

    // Initialize optical depth accumulators for the primary ray.
    float iOdRlh = 0.0;
    float iOdMie = 0.0;

    // Calculate the Rayleigh and Mie phases.
    float cosTheta = dot(r, pSun);
    float pRlh = rayleigh(cosTheta);
    float pMie = mie_Schlick(cosTheta, g);

    // Sample the primary ray.
    for (int i = 0; i < iSteps; i++) {

        // Calculate the primary ray sample position.
        vec3 iPos = r0 + r * (iTime + iStepSize * 0.5);

        // Calculate the height of the sample.
        float iHeight = length(iPos) - rPlanet;

        // Calculate the optical depth of the Rayleigh and Mie scattering for this step.
        float odStepRlh = exp(-iHeight / shRlh) * iStepSize;
        float odStepMie = exp(-iHeight / shMie) * iStepSize;

        // Accumulate optical depth.
        iOdRlh += odStepRlh;
        iOdMie += odStepMie;

        // Calculate the step size of the secondary ray.
        float jStepSize = rsi(iPos, pSun, rAtmos).y / float(jSteps);

        // Initialize the secondary ray time.
        float jTime = 0.0;

        // Initialize optical depth accumulators for the secondary ray.
        float jOdRlh = 0.0;
        float jOdMie = 0.0;

        // Sample the secondary ray.
        for (int j = 0; j < jSteps; j++) {

            // Calculate the secondary ray sample position.
            vec3 jPos = iPos + pSun * (jTime + jStepSize * 0.5);

            // Calculate the height of the sample.
            float jHeight = length(jPos) - rPlanet;

            // Accumulate the optical depth.
            jOdRlh += exp(-jHeight / shRlh) * jStepSize;
            jOdMie += exp(-jHeight / shMie) * jStepSize;

            // Increment the secondary ray time.
            jTime += jStepSize;
        }

        // Calculate attenuation.
        vec3 attn = exp(-(kMie * (iOdMie + jOdMie) + kRlh * (iOdRlh + jOdRlh)));

        // Accumulate scattering.
        rayleigh_collected += odStepRlh * attn;
        mie_collected += odStepMie * attn;

        // Increment the primary ray time.
        iTime += iStepSize;

    }

    // Calculate and return the final color.
    return iSun * (pRlh * kRlh * rayleigh_collected + pMie * kMie * mie_collected);
}

void main()
{    
	vec3 color = vec3(0.0);
  
  vec3 eyedir = get_world_normal();
  vec3 lightdir = uni_lightDir;
  float planetRadius = 6371e3;
  float atmosphereHeight = 100e3;
  vec3 eye_position = uni_eyePos + vec3(0.0, planetRadius, 0.0);
	  
  color = atmosphere(
        eyedir,           // normalized ray direction
        eye_position,               // ray origin
        lightdir,                        // position of the sun
        22.0,                           // intensity of the sun
        planetRadius,                   // radius of the planet in meters
        planetRadius + atmosphereHeight, // radius of the atmosphere in meters
        vec3(5.8e-6, 13.5e-6, 33.1e-6), // Rayleigh scattering coefficient
        21e-6,                          // Mie scattering coefficient
        8e3,                            // Rayleigh scale height
        1.2e3,                          // Mie scale height
        0.758                           // Mie preferred scattering direction
    );
    
  uni_skyPassRT0 = vec4(color, 1.0);
}

